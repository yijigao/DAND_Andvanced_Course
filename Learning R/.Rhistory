knit_with_parameters('D:/DAND/Learning R/lesson3/Lesson3_exercise.Rmd')
?cor.test()
cor.test(pf$age,pf$friend_count,method = "pearson")
cor.test(x = age,y = friend_count,method = "pearson")
cor.test(x = pf$age,y = pf$friend_count,method = "pearson")
cor.test(~age+friend_count,data = pf)
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv",sep = "\t")
# 还可以使用以下代码读入数据
# read.delim("pseudo_facebook.tsv")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point()
# 等效的qplot语法
# qplot(x = age, y = friend_count, data = pf)
# qplot
qplot(x = age, y = friend_count, data = pf)
# ggplot 与 qplot之间的主要区别是：
# 1. 我们需要geom指定图表类型
# 2. ggplot需要将xy变量用aes包裹
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point() +
xlim(13,90)
summary(pf$age)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13,90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_jitter(alpha = 1/20) +
xlim(13,90)
# 抖动可能会给每个点添加正的或负的噪声
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20,position = position_jitter(height = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20,position = position_jitter(height = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(color = "Red", alpha = 1/10, position = position_jitter(height = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
library(dplyr)
age_groups <- group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
head(pf.fc_by_age)
# Another way:
# %>% 可以将函数链接到数据集上
# pf.fc_by_age<- pf %>%
#   group_by(age) %>%
#   summarise(friend_count_mean = mean(friend_count),
#           friend_count_median = median(friend_count),
#           n = n()) %>%
#   arrange(age)
ggplot(aes(x = age, y = friend_count_mean),data = pf.fc_by_age) +
geom_line(color = "Red")
ggplot(aes(x = age, y = friend_count),data = pf) +
geom_point(alpha = 0.05,
position = position_jitter(height = 0),
color = "red") +
coord_trans(y = "sqrt") +
geom_line(stat = "summary", fun.y = mean) +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs = .9),
linetype = 2, color = "blue") +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs = .5),
color = "blue") +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs = .1),
linetype = 2, color = "blue") +
coord_cartesian(xlim = c(13,70), ylim = c(0,1000))
?cor.test()
with(                 , cor.test(age, friend_count))
cor.test(pf$age,pf$friend_count,alternative = "g",method = "pearson")
with(pf,cor.test(age,friend_count,method = "pearson"))
with(subset(pf,age < 70), cor.test(age, friend_count))
with(subset(pf,age <= 70), cor.test(age, friend_count))
with(subset(pf, age <= 70), cor.test(age, friend_count, method = "Spearman"))
with(subset(pf, age <= 70), cor.test(age, friend_count, method = "spearman"))
ggplot(aes(www_like_received,likes_received),data = pf) +
geom_point()
ggplot(aes(www_likes_received,likes_received),data = pf) +
geom_point()
ggplot(aes(www_likes_received,likes_received),pf) +
geom_point()
ggplot(aes(www_likes_received,likes_received),data = pf) +
geom_point()
ggplot(aes(www_likes_received,likes_received),data = pf) +
geom_point(color="red")
ggplot(aes(www_likes_received,likes_received),data = pf) +
geom_point(color="red") +
xlim(0, quantile(pf$www_likes_received, .95)) +
ylim(0, quantile(pf$likes_received, .95))
# quantile(data, prob.)数据的百分比
ggplot(aes(www_likes_received,likes_received),data = pf) +
geom_point(color="red") +
xlim(0, quantile(pf$www_likes_received, .95)) +
ylim(0, quantile(pf$likes_received, .95)) +
geom_smooth(method = "lm", color = "black")
with(pf, cor.test(www_likes_received, likes_received))
install.packages('alr3')
library(alr3)
library(alr3)
?Mitchell
data("Mitchell")
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point()
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red")
with(Mitchell, cor.test(Month, Temp))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
xlim(0,12)
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_continuous(breaks = seq(0,200,12))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_continuous(breaks = seq(0,200,1))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_continuous(breaks = seq(0,200))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_continuous(breaks = seq(0,200,12))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
coord_cartesian(xlim = c(0,12))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_continuous(limits = c(0,200),breaks = 12)
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_continuous(limits = c(0,200),breaks = c(0,200,12))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_continuous(breaks = c(0,200,12))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red")
scale_x_continuous()
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red")
scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red")
scale_x_discrete(breaks = seq(0,203,12))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red")
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_discrete(breaks = seq(0,203,12))
ggplot(aes(Month, Temp),data = Mitchell) +
geom_point(color = "red") +
scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(age, friend_count_mean), data = pf.fc_by_age) +
geom_line()
pf$age_with_month <- with(pf, age + (1- dob_month/12))
ggplot(aes(age_with_months, friend_count), data = pf) +
geom_line()
ggplot(aes(age, friend_count_mean), data = pf.fc_by_age) +
geom_line()
pf$age_with_months <- with(pf, age + (1- dob_month/12))
ggplot(aes(age_with_months, friend_count), data = pf) +
geom_line()
# Another way:
# %>% 可以将函数链接到数据集上
# pf.fc_by_age<- pf %>%
#   group_by(age) %>%
#   summarise(friend_count_mean = mean(friend_count),
#           friend_count_median = median(friend_count),
#           n = n()) %>%
#   arrange(age)
pf.fc_by_age_months <- pf%>%
group_by(age_with_months) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
pf <- select(pf,-age_with_month)
names(pf)
pf.fc_by_age_months
head(pf.fc_by_age_months)
ggplot(aes(age_with_months, friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line()
grid(p1,p2)
p1 <- ggplot(aes(age, friend_count_mean), data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 <- ggplot(aes(age_with_months, friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line()
grid(p1,p2)
gridExtra::arrangeGrob(p1, p2, ncol = 1)
p1 <- ggplot(aes(age, friend_count_mean), data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 <- ggplot(aes(age_with_months, friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line()
gridExtra::arrangeGrob(p1, p2, ncol = 1)
p1 <- ggplot(aes(age, friend_count_mean), data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 <- ggplot(aes(age_with_months, friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line()
gridExtra::arrange(p1, p2, ncol = 1)
library(gridExtra)
p1 <- ggplot(aes(age, friend_count_mean), data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 <- ggplot(aes(age_with_months, friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line()
library(gridExtra)
grid.arrange(p1, p2, ncol = 1)
p1 <- ggplot(aes(age, friend_count_mean), data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 <- ggplot(aes(age_with_months, friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line()
p3 <- ggplot(aes(round(age/5) * 5, friend_count),
data = subset(pf, age < 71)) +
geom_line()
library(gridExtra)
grid.arrange(p1, p2, p3, ncol = 1)
p1 <- ggplot(aes(age, friend_count_mean), data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 <- ggplot(aes(age_with_months, friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line()
p3 <- ggplot(aes(round(age/5) * 5, friend_count),
data = subset(pf, age < 71)) +
geom_line(stat = "summary", fun.y = mean)
library(gridExtra)
grid.arrange(p1, p2, p3, ncol = 1)
p1 <- ggplot(aes(age, friend_count_mean), data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 <- ggplot(aes(age_with_months, friend_count_mean), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line() +
geom_smooth()
p3 <- ggplot(aes(round(age/5) * 5, friend_count),
data = subset(pf, age < 71)) +
geom_line(stat = "summary", fun.y = mean)
library(gridExtra)
grid.arrange(p1, p2, p3, ncol = 1)
getwd()
setwd("D:/DNND/Learning R")
setwd("D:/DAND/Learning R")
# import data set
library(ggplot2)
names(diamends)
names(diamonds)
dim(diamonds)
ggplot(aes(x, price), data = diamonds) +
geom_point()
ggplot(aes(x, price), data = diamonds) +
geom_point() +
smooth()
ggplot(aes(x, price), data = diamonds) +
geom_point() +
smooth(x = x)
ggplot(aes(x, price), data = diamonds) +
geom_point() +
ggplot(aes(x, price), data = diamonds) +
geom_point()
ggplot(aes(x, price), data = diamonds) +
geom_point()
?diamonds
# correlation between price and x
with(diamonds, cor.test(x, price))
# correlation betweenn price and y
with(diamonds, cor.test(y, price))
# correlation between price and z
with(diamonds, cor.test(z, price))
ggplot(aes(depth, price), data = diamonds) +
geom_point(color = "red")
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0,80,2))
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(50,70,2))
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0,80,2))
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
xlim(quantile(diamonds$depth,.05), quantile(diamonds$depth, .95))
scale_x_continuous(breaks = c(0,80,2))
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
xlim(0, quantile(diamonds$depth, .95))
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
xlim(quantile(diamonds$depth, .95))
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
xlim(quantile(diamonds$depth, .05), quantile(diamonds$depth, .95))
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0, 80, 2))
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0, 80))
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0, 80,20))
quantile(diamonds$depth,.95)
quantile(diamonds$depth,.5)
quantile(diamonds$depth,.05)
quantile(diamonds$depth,.95)
# correlation of depth vs price
with(diamonds, cor.test(depth, price))
# Create a scatter plot of price vs carat and omit the top 1% carat values
ggplot(data = diamonds, aes(carat, price)) +
geom_point()
# Create a scatter plot of price vs carat and omit the top 1% carat values
ggplot(data = diamonds, aes(carat, price)) +
geom_point() +
xlim(0, quantile(diamonds$carat, .99))
ggplot(data = diamonds, aes(x * y * z, price)) +
geom_point()
# Create a new variable for volume in the diamends data frame
# This will be helpful in later exercise
diamonds$vulume <- diamonds$x * diamonds$y * diamonds$z
ggplot(diamonds,aes(vulume, price)) +
geom_point()
install.packages("plyr")
install.packages("plyr")
detach("package:plyr", unload = TRUE)
detach("plyr", unload = TRUE)
# how many diamends have 0 volume?
library(plyr)
install.packages("plyr")
# how many diamends have 0 volume?
library(plyr)
count(diamonds$vulume ==  0)
detach("package:plyr", unload = TRUE)
count(diamonds$vulume ==  0)
library(plyr)
count(diamonds$vulume ==  0)
detach("package:plyr", unload = TRUE)
install.packages("dplyr")
# what's the correlation of price and volume?
# Exclude diamends that have a vulume of 0 and that are greater than or equal to 800
with(subset(diamonds, volume != 0 & volume < 800))
# what's the correlation of price and volume?
# Exclude diamends that have a vulume of 0 and that are greater than or equal to 800
with(subset(diamonds, volume != 0 & volume < 800), volume, price)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
diamonds <- select(diamonds, -vulume)
diamonds <- select.list(diamonds, -vulume)
diamonds <- select.list(diamonds, -vulume)
diamonds <- sel
?install.packages
??uninstall
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
names(diamonds)
remove.packages("ggplot2")
installed.packages("ggplot2")
library(ggplot2)
diamonds
names(diamonds)
summary(diamonds)
