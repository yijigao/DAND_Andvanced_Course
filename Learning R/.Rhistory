knit_with_parameters('D:/DAND/Learning R/lesson3/Lesson3_exercise.Rmd')
lib
install.packages("ggplot2")
library(ggplot2)
names(diamonds)
library(ggplot2)
dim(diamonds)
ggplot(aes(x, price), data = diamonds) +
geom_point()
ggplot(aes(depth, price), data = diamonds) +
geom_point(color = "red")
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0,80,2))
quantile(diamonds$depth,.95)
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0, 80))
with(diamonds, cor.test(depth, price))
ggplot(data = diamonds, aes(carat, price)) +
geom_point() +
xlim(0, quantile(diamonds$carat, .99))
names(diamonds)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(diamonds,aes(volume, price)) +
geom_point()
count(diamonds$volume ==  0)
library(plyr)
count(diamonds$volume ==  0)
with(subset(diamonds, volume != 0 & volume < 800), volume, price)
# what's the correlation of price and volume?
# Exclude diamends that have a vulume of 0 and that are greater than or equal to 800
with(subset(diamonds, volume != 0 & volume < 800), cor.test(volume, price))
# Subset the data to exclude diamends with a volume greater than or equal to 800, Also, exclude diamends with a volume of 0.
# Adjust the transparency of the points and add a linear model to the plot.
ggplot(subset(diamonds, volume !=0 & volume < 800), aes(volume, price)) +
geom_point()
# Subset the data to exclude diamends with a volume greater than or equal to 800, Also, exclude diamends with a volume of 0.
# Adjust the transparency of the points and add a linear model to the plot.
ggplot(subset(diamonds, volume !=0 & volume < 800), aes(volume, price)) +
geom_point() +
geom_smooth()
# Subset the data to exclude diamends with a volume greater than or equal to 800, Also, exclude diamends with a volume of 0.
# Adjust the transparency of the points and add a linear model to the plot.
ggplot(subset(diamonds, volume !=0 & volume < 800), aes(volume, price)) +
geom_point() +
geom_smooth(method = "lm")
?geom_smooth
library(dbplyr)
library(dplyr)
detach("package:plyr", unload = TRUE)
detach("package:plyr", unload=TRUE)
library(dplyr)
library(dplyr)
detach("package:plyr", unload=TRUE)
detach("plyr", unload=TRUE)
# import data set
library(ggplot2)
dim(diamonds)
# Create a scatterplot of price vs x
ggplot(aes(x, price), data = diamonds) +
geom_point()
# correlation between price and x
with(diamonds, cor.test(x, price))
# correlation betweenn price and y
with(diamonds, cor.test(y, price))
# correlation between price and z
with(diamonds, cor.test(z, price))
# create a simple scatter plot of price vs depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(color = "red")
# Change the code to make the transparency of the point to
# be 1/100 of what they are now and mark the x-axis every 2
# units.
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0,80,2))
quantile(diamonds$depth,.95)
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0, 80))
# correlation of depth vs price
with(diamonds, cor.test(depth, price))
# Create a scatter plot of price vs carat and omit the top 1% carat values
ggplot(data = diamonds, aes(carat, price)) +
geom_point() +
xlim(0, quantile(diamonds$carat, .99))
names(diamonds)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(diamonds,aes(volume, price)) +
geom_point()
# how many diamends have 0 volume?
library(plyr)
count(diamonds$volume ==  0)
# what's the correlation of price and volume?
# Exclude diamends that have a vulume of 0 and that are greater than or equal to 800
with(subset(diamonds, volume != 0 & volume < 800), cor.test(volume, price))
# Subset the data to exclude diamends with a volume greater than or equal to 800, Also, exclude diamends with a volume of 0.
# Adjust the transparency of the points and add a linear model to the plot.
ggplot(subset(diamonds, volume !=0 & volume < 800), aes(volume, price)) +
geom_point() +
geom_smooth(method = "lm")
library(dplyr)
detach("package:plyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
diamendsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
head(diamendsByClarity)
library(dplyr)
detach("package:plyr", unload=TRUE)
head(diamendsByClarity)
diamendsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(as.numeric(price)),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
head(diamendsByClarity)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(as.numeric(price)),
median_price = median(as.numeric(price)),
min_price = min(as.numeric(price)),
max_price = max(as.numeric(price)),
n = n()) %>%
arrange(clarity)
head(diamendsByClarity)
View(diamendsByClarity)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(as.numeric(price)))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(as.numeric(price)))
??delete data
??delete
??remove
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(clarity, mean_price)) +
geom_bar()
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
grid.arrange(p1, p2, ncol = 1)
View(diamonds_by_clarity)
View(diamonds_mp_by_clarity)
View(diamonds_mp_by_color)
grid.arrange(p1, p2)
p1
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(as.numeric(price)))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(as.numeric(price)))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(clarity, mean_price)) +
geom_bar(stat = clarity)
?geom_bar
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(as.numeric(price)))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(as.numeric(price)))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(clarity, mean_price)) +
geom_bar(stat = "count")
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
p1
p1
geom_bar(aes(clarity, mean_price), diamonds_mp_by_clarity)
geom_bar(aes(clarity, mean_price), diamonds_mp_by_clarity)
ggplot() + geom_bar(aes(clarity, mean_price), diamonds_mp_by_clarity)
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(as.numeric(price)))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(as.numeric(price)))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(clarity)) +
geom_bar(stat = "count")
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
p1
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(as.numeric(price)))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(as.numeric(price)))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(clarity)) +
geom_bar()
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
p1
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(as.numeric(price)))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(as.numeric(price)))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(clarity, mean_price)) +
geom_bar()
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
p1
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(as.numeric(price)))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(as.numeric(price)))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(x = clarity, y = mean_price)) +
geom_bar()
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
p1
names(diamonds_mp_by_clarity)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(price))
p1 <- ggplot(diamonds_mp_by_clarity,aes(x = clarity, y = mean_price)) +
geom_bar()
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
p1
diamonds_mp_by_clarity <- data.frame(clarity = c(clarity),
mean_price = c(mean_price))
diamonds_mp_by_clarity <- data.frame(clarity = c(diamonds_mp_by_clarity$clarity),
mean_price = c(diamonds_mp_by_clarity$mean_price))
p1 <- ggplot(diamonds_mp_by_clarity,aes(x = clarity, y = mean_price)) +
geom_bar()
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
p1
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(price))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(x = clarity, y = mean_price)) +
geom_bar(stat = "identity")
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar()
p1
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(price))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(x = clarity, y = mean_price)) +
geom_bar(stat = "identity")
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar(stat = "identity")
# We've created summary data frames with the mean price by clarity and color. You can run the code by clarity and color
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity,
mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color,
mean_price = mean(price))
# Write a additional code to create two bar plots on one output image using the grid.arrange() function from the package gridExtra
library(gridExtra)
p1 <- ggplot(diamonds_mp_by_clarity,aes(x = clarity, y = mean_price)) +
geom_bar(stat = "identity")
p2 <- ggplot(diamonds_mp_by_color,aes(color, mean_price)) +
geom_bar(stat = "identity")
grid.arrange(p1, p2, ncol = 1)
?diamonds
setwd("D:/DAND/Learning R")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
library(ggplot2)
library(ggplot2)
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
names(pf)
library(ggplot2)
pf <- data.frame("pseudo_facebook.tsv")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
library(ggplot2)
pf <- open("pseudo_facebook.tsv")
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", seq = "t\")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", seq = "\t")
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_histogram()
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_histogram(stat = "identity")
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot()
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot()
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
geom_line(aes(color = gender), stat = "summary", fun.y = meadian)
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot()
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
ggplot(subset(pf, !is.na(gender)), aes(age, firend_count)) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot()
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = gender), stat = "summary", fun.y = mean)
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
pf.fc_by_age_gender <- pf %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(as.numeric(friend_count)),
median_friend_count = median(as.numeric(friend_count)),
n = n()) %>%
arrange(age, gender)
head(pf.fc_by_age_gender)
library(dplyr)
pf.fc_by_age_gender <- pf %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(as.numeric(friend_count)),
median_friend_count = median(as.numeric(friend_count)),
n = n()) %>%
arrange()
head(pf.fc_by_age_gender)
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot()
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
library(dplyr)
pf.fc_by_age_gender <- pf %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(as.numeric(friend_count)),
median_friend_count = median(as.numeric(friend_count)),
n = n()) %>%
arrange(age, gender)
head(pf.fc_by_age_gender)
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot()
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
library(dplyr)
pf.fc_by_age_gender <- pf %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(as.numeric(friend_count)),
median_friend_count = median(as.numeric(friend_count)),
n = n()) %>%
arrange(age, gender,mean_friend_count, median_friend_count, n)
head(pf.fc_by_age_gender)
tail(pf.fc_by_age_gender)
pf.fc_by_age_gender <- subset(pf, !is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(as.numeric(friend_count)),
median_friend_count = median(as.numeric(friend_count)),
n = n()) %>%
arrange(age, gender,mean_friend_count, median_friend_count, n)
tail(pf.fc_by_age_gender)
head(pf.fc_by_age_gender)
tail(pf.fc_by_age_gender)
pf.fc_by_age_gender <- subset(pf, !is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
arrange(age, gender)
head(pf.fc_by_age_gender)
tail(pf.fc_by_age_gender)
pf.fc_by_age_gender <- subset(pf, !is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
head(pf.fc_by_age_gender)
tail(pf.fc_by_age_gender)
ggplot(pf.fc_by_age_gender,aes(age, median_friend_count)) +
geom_line()
ggplot(pf.fc_by_age_gender,aes(age, median_friend_count)) +
geom_line(color = gender)
ggplot(pf.fc_by_age_gender,aes(age, median_friend_count)) +
geom_line(aes(color=gender))
install.packages('reshape2')
library(reshape2)
