knit_with_parameters('D:/DAND/Learning R/lesson3/Lesson3_exercise.Rmd')
lib
install.packages("ggplot2")
library(ggplot2)
names(diamonds)
library(ggplot2)
dim(diamonds)
ggplot(aes(x, price), data = diamonds) +
geom_point()
ggplot(aes(depth, price), data = diamonds) +
geom_point(color = "red")
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0,80,2))
quantile(diamonds$depth,.95)
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0, 80))
with(diamonds, cor.test(depth, price))
ggplot(data = diamonds, aes(carat, price)) +
geom_point() +
xlim(0, quantile(diamonds$carat, .99))
names(diamonds)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(diamonds,aes(volume, price)) +
geom_point()
count(diamonds$volume ==  0)
library(plyr)
count(diamonds$volume ==  0)
with(subset(diamonds, volume != 0 & volume < 800), volume, price)
# what's the correlation of price and volume?
# Exclude diamends that have a vulume of 0 and that are greater than or equal to 800
with(subset(diamonds, volume != 0 & volume < 800), cor.test(volume, price))
# Subset the data to exclude diamends with a volume greater than or equal to 800, Also, exclude diamends with a volume of 0.
# Adjust the transparency of the points and add a linear model to the plot.
ggplot(subset(diamonds, volume !=0 & volume < 800), aes(volume, price)) +
geom_point()
# Subset the data to exclude diamends with a volume greater than or equal to 800, Also, exclude diamends with a volume of 0.
# Adjust the transparency of the points and add a linear model to the plot.
ggplot(subset(diamonds, volume !=0 & volume < 800), aes(volume, price)) +
geom_point() +
geom_smooth()
# Subset the data to exclude diamends with a volume greater than or equal to 800, Also, exclude diamends with a volume of 0.
# Adjust the transparency of the points and add a linear model to the plot.
ggplot(subset(diamonds, volume !=0 & volume < 800), aes(volume, price)) +
geom_point() +
geom_smooth(method = "lm")
?geom_smooth
library(dbplyr)
library(dplyr)
detach("package:plyr", unload = TRUE)
detach("package:plyr", unload=TRUE)
library(dplyr)
library(dplyr)
detach("package:plyr", unload=TRUE)
detach("plyr", unload=TRUE)
# import data set
library(ggplot2)
dim(diamonds)
# Create a scatterplot of price vs x
ggplot(aes(x, price), data = diamonds) +
geom_point()
# correlation between price and x
with(diamonds, cor.test(x, price))
# correlation betweenn price and y
with(diamonds, cor.test(y, price))
# correlation between price and z
with(diamonds, cor.test(z, price))
# create a simple scatter plot of price vs depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(color = "red")
# Change the code to make the transparency of the point to
# be 1/100 of what they are now and mark the x-axis every 2
# units.
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0,80,2))
quantile(diamonds$depth,.95)
# most diamends are between what value of depth
ggplot(aes(depth, price), data = diamonds) +
geom_point(alpha = 0.01, color = "red") +
scale_x_continuous(breaks = c(0, 80))
# correlation of depth vs price
with(diamonds, cor.test(depth, price))
# Create a scatter plot of price vs carat and omit the top 1% carat values
ggplot(data = diamonds, aes(carat, price)) +
geom_point() +
xlim(0, quantile(diamonds$carat, .99))
names(diamonds)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(diamonds,aes(volume, price)) +
geom_point()
# how many diamends have 0 volume?
library(plyr)
count(diamonds$volume ==  0)
# what's the correlation of price and volume?
# Exclude diamends that have a vulume of 0 and that are greater than or equal to 800
with(subset(diamonds, volume != 0 & volume < 800), cor.test(volume, price))
# Subset the data to exclude diamends with a volume greater than or equal to 800, Also, exclude diamends with a volume of 0.
# Adjust the transparency of the points and add a linear model to the plot.
ggplot(subset(diamonds, volume !=0 & volume < 800), aes(volume, price)) +
geom_point() +
geom_smooth(method = "lm")
library(dplyr)
detach("package:plyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
library(ggplot2)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot()
ggplot(subset(pf, !is.na(gender)), aes(gender, age)) +
geom_boxplot() +
stat_summary(fun.y = mean, geom = "point", shape =4)
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
library(dplyr)
pf.fc_by_age_gender <- subset(pf, !is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
head(pf.fc_by_age_gender)
tail(pf.fc_by_age_gender)
ggplot(pf.fc_by_age_gender,aes(age, median_friend_count)) +
geom_line(aes(color=gender))
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend")
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend")
install.packages('reshape2')
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend")
install.packages("reshape2")
install.packages('reshape2')
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend")
install.packages('reshape2')
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
install.packages("reshape2")
install.packages('reshape2')
library(reshape2)
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
install.packages("reshape2")
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
head(pf.fc_by_age_gender.wide)
ggplot(pf.fc_by_age_gender.wide, aes(age, female / male)) +
geom_hline()
library(ggplot2)
# Plot the retio of the female to male median firend counts using the data frame pf.fc_by_age_gender.wide
ggplot(pf.fc_by_age_gender.wide, aes(age, female / male)) +
geom_hline()
ggplot(pf.fc_by_age_gender.wide, aes(age, female / male)) +
geom_hline(yintercept = 1)
ggplot(pf.fc_by_age_gender.wide, aes(age, female)) +
geom_hline()
ggplot(pf.fc_by_age_gender.wide, aes(age, female)) +
geom_line()
ggplot(pf.fc_by_age_gender.wide, aes(age, female)) +
geom_line(aes(color = male)) +
ggplot(pf.fc_by_age_gender.wide, aes(age, female)) +
geom_line(aes(color = male))
ggplot(pf.fc_by_age_gender.wide, aes(age, female)) +
geom_line(aes(color = male))
ggplot(pf.fc_by_age_gender.wide, aes(age, female, male)) +
geom_line()
ggplot(pf.fc_by_age_gender.wide, aes(age, female)) +
geom_line()
ggplot(pf.fc_by_age_gender.wide, aes(age, female / male )) +
geom_line()
# Plot the retio of the female to male median firend counts using the data frame pf.fc_by_age_gender.wide
ggplot(pf.fc_by_age_gender.wide, aes(age, female / male)) +
geom_line() +
geom_hline(yintercept = 1)
ggplot(pf.fc_by_age_gender.wide, aes(age, female / male)) +
geom_line() +
geom_hline(yintercept = 1 , color = "red")
# Plot the retio of the female to male median firend counts using the data frame pf.fc_by_age_gender.wide
ggplot(pf.fc_by_age_gender.wide,
aes(age, female / male),
xlab("age"),
ylab("ratio")) +
geom_line() +
geom_hline(yintercept = 1 , color = "red")
?geom_hline
# Plot the retio of the female to male median firend counts using the data frame pf.fc_by_age_gender.wide
ggplot(pf.fc_by_age_gender.wide, aes(age, female / male)) +
geom_line() +
geom_hline(yintercept = 1, alpha = 0.3, linetype =2)
# Plot the retio of the female to male median firend counts using the data frame pf.fc_by_age_gender.wide
ggplot(pf.fc_by_age_gender.wide, aes(age, female / male)) +
geom_line() +
geom_hline(yintercept = 1, alpha = 0.3, linetype =2, color = "red")
head(pf$tenure)
head(pf)
?pf
pf$year_joined <- floor(2014 - pf$tenure/365)
head(pf$year_joined)
table(pf$year_joined)
?cut
head(Z)
Z <- stats::rnorm(10000)
head(Z)
cut(rep(1,5), 4)
a <- rep(1,5)
a
a
cut(a,5)
a
a <- c(1,5)
a
a <- c(1,5)
a
a <- c(1,2,3,4,5,6,7)
a
cut(a,2)
cut(a,3)
cut(a,4)
a <- c(2004,2004,2006,2007,2008,2009,2010,2011,2012,2013,2014)
a
cut(a,4)
source('~/.active-rstudio-document', echo=TRUE)
cut(a,breaks = seq(2003, 2014, 1))
cut(a,breaks = seq(2003, 2014, 2))
cut(a, breaks = seq(2003, 2014, 2))
cut(a, breaks = seq(2010, 2014, 2))
cut(a, breaks = seq(2010, 2014, 2))
a <- c(2003,2004,2006,2007,2008,2009,2010,2011,2012,2013,2014)
cut(a, breaks = seq(2010, 2014, 2))
cut(a, breaks = (seq(2003,2010,5),seq(2011,2014,1)))
cut(a, breaks = seq(2003,2010,5) & breaks = seq(2011,2014,1))
cut(a, breaks = seq(2003,2010,5))
cut(a, breaks = seq(2003,2010,2))
Z <- stats::rnorm(10000)
table(cut(Z, breaks = -6:6))
sum(table(cut(Z, breaks = -6:6, labels = FALSE)))
sum(graphics::hist(Z, breaks = -6:6, plot = FALSE)$counts)
cut(rep(1,5), 4) #-- dummy
tx0 <- c(9, 4, 6, 5, 3, 10, 5, 3, 5)
x <- rep(0:8, tx0)
stopifnot(table(x) == tx0)
table( cut(x, b = 8))
table( cut(x, breaks = 3*(-2:5)))
table( cut(x, breaks = 3*(-2:5), right = FALSE))
table(cx  <- cut(x, breaks = 2*(0:4)))
table(cxl <- cut(x, breaks = 2*(0:4), right = FALSE))
which(is.na(cx));  x[is.na(cx)]  #-- the first 9  values  0
which(is.na(cxl)); x[is.na(cxl)] #-- the last  5  values  8
y <- stats::rnorm(100)
table(cut(y, breaks = pi/3*(-3:3)))
table(cut(y, breaks = pi/3*(-3:3), dig.lab = 4))
table(cut(y, breaks =  1*(-3:3), dig.lab = 4))
# extra digits don't "harm" here
table(cut(y, breaks =  1*(-3:3), right = FALSE))
#- the same, since no exact INT!
aaa <- c(1,2,3,4,5,2,3,4,5,6,7)
cut(aaa, 3)
cut(aaa, 3, dig.lab = 4, ordered = TRUE)
labs <- levels(cut(aaa, 3))
cbind(lower = as.numeric( sub("\\((.+),.*", "\\1", labs) ),
upper = as.numeric( sub("[^,]*,([^]]*)\\]", "\\1", labs) ))
cut(a, c(1,3,5))
cut(a, c(1,3,5,8))
a <- (1,2,3,4,5,6,7,8)
cut(a, c(1,3,5,8))
pf$year_joined.bucket <- cut(pf$year_joined,
c(2004,2009,2011,2012,2014))
pf$year_joined <- floor(2014 - pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined,
c(2004,2009,2011,2012,2014))
table(pf$year_joined.bucket)
table(pf$year_joined.bucket, useNA = "ifany")
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
ggplot(subset(pf, !is.na(gender)), aes(age, friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
ggplot(subset(pf, !is.na(year_joined.bucket)), aes(age, friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
setwd("D:/DAND/Learning R")
