getwd
getwd()
setwd("D:/DNND/Learning R/")
?diamonds
knitr::opts_chunk$set(echo = TRUE)
summary(diamonds)
summary(diamonds)
summary(mtcars)
library(ggplot2)
data(diamonds)
summary(diamonds)
factor(diamonds)
ordered(diamonds)
?ordered
is.factor(diamonds)
names(diamonds)
summary(diamonds)
summary(diamonds)
?diamonds
summary(diamonds)
qplot(x = price, data = diamonds)
summary(diamonds$price)
qplot(x = price, data = diamonds)
summary(diamonds$price)
len(subset(diamonds, price < 500))
subset(diamonds, price < 500)
# How many diamonds cost less than $250?
subset(diamonds, price < 250)
# How many diamonds cost less than $250?
subset(diamonds, price < 250)
subset(diamonds, price < 250)
# How many diamonds cost $15000 or more?
subset(diamonds, price >= 15000)
qplot(x = price, data = diamonds)
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(0,2000),breaks = seq(0,2000,200))
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(200,2000),breaks = seq(0,2000,200))
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,200))
qplot(x = price, data = diamonds, binwidth = 10) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,200))
qplot(x = price, data = diamonds, binwidth = 20) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,200))
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,200))
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,200))
~facet_wrap(~diamonds$cut)
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,200))
~facet_wrap(~cut)
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,200)) +
facet_wrap(~cut)
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,500)) +
facet_wrap(~cut)
# Break out the histogram of diamond price by cut
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_continuous(limits = c(200,2000),breaks = seq(200,2000,500)) +
facet_wrap(~cut)
by(diamonds$price,diamonds$cut,summary)
# In the two last exercises,we look at the distribution for diamonds by cut
# Run the code below in R to generate the histogram as a reminder
qplot(x = price,data = diamonds) +
facet_wrap(~cut)
sp
sp <- ggplot(diamonds,aes(x = price))
sp
sp <- ggplot(diamonds,aes(x = price)) +
geom_histogram()
sp
# In the two last exercises,we look at the distribution for diamonds by cut
# Run the code below in R to generate the histogram as a reminder
qplot(x = price,data = diamonds) +
facet_wrap(~cut)
# Modifying facet label appearance
sp <- ggplot(diamonds,aes(x = price)) +
geom_histogram(binwidth = 1)
sp
sp + facet_grid(cut~.)
# In the two last exercises,we look at the distribution for diamonds by cut
# Run the code below in R to generate the histogram as a reminder
qplot(x = price,data = diamonds) +
facet_wrap(~cut)
# Modifying facet label appearance
sp <- ggplot(diamonds,aes(x = price)) +
geom_histogram(binwidth = 1)
sp + facet_wrap(~cut)
sp + facet_wrap(~cut) +
theme(strip.text.x = element_text(size = 8,angle = 75),
strip.text.y = element_text(size = 12,face = "bold"),
strip.background = element_rect(colour = "red",fill = "#CCCCFF"))
sp + facet_wrap(~cut) +
theme(strip.text.x = element_text(size = 8,angle = 75),
strip.text.y = element_text(size = 12,face = "bold"),
strip.background = element_rect(colour = "red",fill = "#CCCCFF"))
sp <- ggplot(diamonds,aes(x = price))
sp + facet_wrap(~cut) +
theme(strip.text.x = element_text(size = 8,angle = 75),
strip.text.y = element_text(size = 12,face = "bold"),
strip.background = element_rect(colour = "red",fill = "#CCCCFF"))
sp <- ggplot(diamonds,aes(x = price)) +
geom_histogram()
sp + facet_wrap(~cut) +
theme(strip.text.x = element_text(size = 8,angle = 75),
strip.text.y = element_text(size = 12,face = "bold"),
strip.background = element_rect(colour = "red",fill = "#CCCCFF"))
# Free Scales
sp + facet_wrap(~cut,scales = "free")
# Free Scales
sp + facet_wrap(~cut,scales = "free_y")
# Free Scales
sp + facet_wrap(~cut,scales = "free")
price_by_carat <- ggplot(diamonds,aes(x = price/carat)) +
geom_histogram()
price_by_carat
price_by_carat + scale_x_log10()
price_by_carat + scale_x_log10()
price_by_carat <- ggplot(diamonds,aes(x = price/carat),xlab("Price")) +
geom_histogram()
price_by_carat + scale_x_log10()
# Create a histogram of price per carat and facet it by cut.
# You can make adjustments to the code from previous exercise to get started
price_by_carat <- ggplot(diamonds,aes(x = price/carat)) +
geom_histogram(xlab = "Price by Carat")
price_by_carat + scale_x_log10()
# Adjust the bin width and trancform the scale of x-axis using log10
# Create a histogram of price per carat and facet it by cut.
# You can make adjustments to the code from previous exercise to get started
price_by_carat <- ggplot(diamonds,aes(x = price/carat)) +
geom_histogram()
price_by_carat + scale_x_log10()
# Adjust the bin width and trancform the scale of x-axis using log10
# Create a histogram of price per carat and facet it by cut.
# You can make adjustments to the code from previous exercise to get started
price_by_carat <- ggplot(diamonds,aes(x = price/carat)) +
geom_histogram()
# Adjust the bin width and trancform the scale of x-axis using log10
price_by_carat + scale_x_log10()
# (If the Very Good facet looks smooth, try decreasing your bin width! If the data looks skewed, did you remember to perform a log10 transform?)
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = price)) +
geom_boxplot()
price_in_cut
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot()
price_in_cut
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,5000))
price_in_cut
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
price_in_clarity <- ggplot(diamonds,aes(x = clarity, y = price)) +
geom_boxplot()
price_in_clarity
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
price_in_clarity <- ggplot(diamonds,aes(x = clarity, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_clarity
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
price_in_clarity <- ggplot(diamonds,aes(x = clarity, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_clarity
price_in_color <- ggplot(diamonds,aes(x = color, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_color
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
price_in_clarity <- ggplot(diamonds,aes(x = clarity, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_clarity
price_in_color <- ggplot(diamonds,aes(x = color, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,8000))
price_in_color
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
price_in_clarity <- ggplot(diamonds,aes(x = clarity, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_clarity
price_in_color <- ggplot(diamonds,aes(x = color, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,8000))
price_in_color
# Numerous summeries
by(diamonds$price,diamonds$color,summary)
by(diamonds$price,diamonds$clarity,summary)
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
price_in_clarity <- ggplot(diamonds,aes(x = clarity, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_clarity
price_in_color <- ggplot(diamonds,aes(x = color, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,8000))
price_in_color
# Numerous summeries
by(diamonds$price,diamonds$color,summary)
by(diamonds$price,diamonds$clarity,summary)
# IQR
IQR(diamonds$color)
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
price_in_clarity <- ggplot(diamonds,aes(x = clarity, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_clarity
price_in_color <- ggplot(diamonds,aes(x = color, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,8000))
price_in_color
# Numerous summeries
by(diamonds$price,diamonds$color,summary)
by(diamonds$price,diamonds$clarity,summary)
# IQR
IQR(subset(diamonds,color=="D")$price)
IQR(subset(diamonds,color=="J")$price)
# Investigate the price of diamends using box plots, numerical summeries, and one of the
# following categorical variables:cut,clarity,or color.
price_in_cut <- ggplot(diamonds,aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_cut
price_in_clarity <- ggplot(diamonds,aes(x = clarity, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7000))
price_in_clarity
price_in_color <- ggplot(diamonds,aes(x = color, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,8000))
price_in_color
# Numerous summeries
by(diamonds$price,diamonds$color,summary)
by(diamonds$price,diamonds$clarity,summary)
# IQR
IQR(subset(diamonds,color=="J")$price)
# Investigate the price per carat of diamends across
# the different colors of diamends using boxplots.
price_in_color_carat <- ggplot(diamonds,aes(x = color, y = price/carat)) +
geom_boxplot()
price_in_color_carat
# Investigate the price per carat of diamends across
# the different colors of diamends using boxplots.
price_in_color_carat <- ggplot(diamonds,aes(x = color, y = price/carat)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,7500))
price_in_color_carat
# Investigate the price per carat of diamends across
# the different colors of diamends using boxplots.
price_in_color_carat <- ggplot(diamonds,aes(x = color, y = price/carat)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,6000))
price_in_color_carat
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = color, y = price/carat)) +
geom_freqpoly()
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = price/carat)) +
geom_freqpoly()
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = price/carat),binwidth=1) +
geom_freqpoly()
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = price/carat),binwidth=2) +
geom_freqpoly()
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = price/carat),binwidth=100) +
geom_freqpoly()
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = price/carat)) +
geom_freqpoly(binwidth=1)
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = price/carat)) +
geom_freqpoly(binwidth=1)
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = carat)) +
geom_freqpoly(binwidth=1)
su
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = carat)) +
geom_freqpoly(binwidth=1)
by(diamonds,diamonds$carat,sum)
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = carat)) +
geom_freqpoly(binwidth=1)
summary(diamonds)
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = carat)) +
geom_freqpoly(binwidth=0.1)
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = carat)) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous(breaks = seq(0,5,0.1))
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = carat)) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous(breaks = seq(0,5,0.2))
# Investigate the weight of the diamends(carat) using a frequency polygon
ggplot(diamonds,aes(x = carat)) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous(breaks = seq(0,5,0.2)) +
scale_y_continuous(breaks = seq(0,12000,2000))
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total")
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.xlsx")
getwd()
setqw("D:/DNND/Learning R/lesson3")
setwd("D:/DNND/Learning R/lesson3")
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.xlsx")
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.xlsx")
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.xlsx")
summary(cellphones)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.csv")
summary(cellphones)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
summary(cellphones)
names(cellphones)
summary(cellphones)
ggplot(cellphones,aes(x = 2011))
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
ggplot(cellphones,aes(x = 2011)) +
geom_histogram()
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
ggplot(cellphones) +
geom_histogram()
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
ggplot(cellphones,aes()) +
geom_histogram()
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
ggplot(cellphones,aes(x = )) +
geom_histogram()
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
cellphones <- read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
ggplot(cellphones,aes(x = 1977)) +
geom_histogram()
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
cellphones <- data.frame(t(data))
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
cellphones <- data.frame(t(data))
head(cellphones)
summary(cellphones)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("cell_phone_total.csv",header = T,row.names = 1,check.names = F)
cellphones <- data.frame(t(data))
ggplot(cellphones,aes(x = China)) +
geom_histogram()
head(cellphones)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("indicator gapminder gdp_per_capita_ppp",header = T,row.names = 1,check.names = F)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("indicator gapminder gdp_per_capita_ppp.csv",header = T,row.names = 1,check.names = F)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("gdp_per_capita_ppp.csv",header = T,row.names = 1,check.names = F)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("gdp_per_capita_ppp.csv",header = T,row.names = 1,check.names = F)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("gdp_per_capita_ppp.csv")
Income <- data.frame(t(data))
head(Income)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("gdp_per_capita_ppp.csv")
head(data)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Download a data set of your choice and create 2-5 plots that
# make use of the techniques from lesson 3.
library(ggplot2)
library(tidyr)
library(dplyr)
data = read.csv("gdp_per_capita_ppp.csv")
summary(data)
